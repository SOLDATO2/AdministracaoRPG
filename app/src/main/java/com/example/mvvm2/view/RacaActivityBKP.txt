


ESSE É O BKP ANTES DE TER IMPLEMENTADO A FUNCAO DE ATUALIZAÇÃO

















package com.example.mvvm2.view

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.viewModels
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.KeyboardArrowDown
import androidx.compose.material.icons.filled.KeyboardArrowUp
import androidx.compose.material3.Button
import androidx.compose.material3.Divider
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.material3.TextField
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp
import com.example.mvvm2.model.database.AppDatabase
import com.example.mvvm2.viewmodel.RacaViewModel
import com.example.mvvm2.viewmodel.factory.RacaViewModelFactory


class GerenciarRacaActivity : ComponentActivity() {
    private val viewModel: RacaViewModel by viewModels {
        val database = AppDatabase.getDatabase(applicationContext)
        RacaViewModelFactory(database.racaDao())
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            GerenciarRacaScreen(viewModel)
        }
    }
}

@Composable
fun GerenciarRacaScreen(racaViewModel: RacaViewModel) {

    //campos cadastro
    var nome by remember { mutableStateOf("") }
    var habilidadeEspecifica by remember { mutableStateOf("") }

    //campos busca por nome e habilidade
    var buscaNome by remember { mutableStateOf("") }
    var buscaHabilidade by remember { mutableStateOf("") }

    //listas para armazenar resultados ( são modificadas pelo ViewModel específico )
    //nao sao mais necessarias ja que estamos usando elas dentro das funcoes
    /*val listaRacas by racaViewModel.listaRacas
    val listaRacasPorNome by racaViewModel.listaRacasPorNome
    val listaRacasPorHabilidadeEspecifica by racaViewModel.listaRacasPorHabilidadeEspecifica*/

    //estados para os menus colapsáveis
    var cadastrarRacaExpanded by remember { mutableStateOf(false) }
    var buscarTodosExpanded by remember { mutableStateOf(false) }
    var buscarPorNomeExpanded by remember { mutableStateOf(false) }
    var buscarPorHabilidadeExpanded by remember { mutableStateOf(false) }

    Column(modifier = Modifier.fillMaxSize().padding(16.dp)) {
        Text(text = "Gerenciar Raças", style = MaterialTheme.typography.titleLarge)

        // Menu para Cadastrar Raça
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceBetween
        ) {
            Text("Cadastrar Raça", modifier = Modifier.align(Alignment.CenterVertically))
            IconButton(onClick = { cadastrarRacaExpanded = !cadastrarRacaExpanded }) {
                val arrowIcon = if (cadastrarRacaExpanded) {
                    Icons.Filled.KeyboardArrowUp
                } else {
                    Icons.Filled.KeyboardArrowDown
                }
                Icon(imageVector = arrowIcon, contentDescription = "Expandir/Colapsar")
            }
        }
        if (cadastrarRacaExpanded) {
            CadastroRacaMenu(
                racaViewModel = racaViewModel,
                nome = nome,
                setNome = { nome = it },
                habilidadeEspecifica = habilidadeEspecifica,
                setHabilidadeEspecifica = { habilidadeEspecifica = it }
            )
        }

        // Menu para Buscar por Nome
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceBetween
        ) {
            Text("Buscar por Nome", modifier = Modifier.align(Alignment.CenterVertically))
            IconButton(onClick = { buscarPorNomeExpanded = !buscarPorNomeExpanded }) {
                val arrowIcon = if (buscarPorNomeExpanded) {
                    Icons.Filled.KeyboardArrowUp
                } else {
                    Icons.Filled.KeyboardArrowDown
                }
                Icon(imageVector = arrowIcon, contentDescription = "Expandir/Colapsar")
            }
        }
        if (buscarPorNomeExpanded) {
            BuscaPorNome(
                racaViewModel = racaViewModel,
                buscaNome = buscaNome,
                setBuscaNome = { buscaNome = it }
            )
        }

        // Menu para Buscar por Habilidade
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceBetween
        ) {
            Text("Buscar por Habilidade", modifier = Modifier.align(Alignment.CenterVertically))
            IconButton(onClick = { buscarPorHabilidadeExpanded = !buscarPorHabilidadeExpanded }) {
                val arrowIcon = if (buscarPorHabilidadeExpanded) {
                    Icons.Filled.KeyboardArrowUp
                } else {
                    Icons.Filled.KeyboardArrowDown
                }
                Icon(imageVector = arrowIcon, contentDescription = "Expandir/Colapsar")
            }
        }

        if (buscarPorHabilidadeExpanded) {
            BuscaPorHabilidade(
                racaViewModel = racaViewModel,
                buscaHabilidade = buscaHabilidade,
                setBuscaHabilidade = { buscaHabilidade = it }
            )
        }

        // Menu para Mostrar todos
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceBetween
        ) {
            Text("Mostrar Todos", modifier = Modifier.align(Alignment.CenterVertically))
            IconButton(onClick = { buscarTodosExpanded = !buscarTodosExpanded }) {
                val arrowIcon = if (buscarTodosExpanded) {
                    Icons.Filled.KeyboardArrowUp
                } else {
                    Icons.Filled.KeyboardArrowDown
                }
                Icon(imageVector = arrowIcon, contentDescription = "Expandir/Colapsar")
            }
        }
        if (buscarTodosExpanded) {
            ListaRacas(racaViewModel = racaViewModel)
        }
    }
}



@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun CadastroRacaMenu(racaViewModel: RacaViewModel, nome: String, setNome: (String) -> Unit, habilidadeEspecifica: String, setHabilidadeEspecifica: (String) -> Unit) {
    Column(modifier = Modifier.padding(8.dp)) {
        TextField(
            value = nome,
            onValueChange = setNome,
            label = { Text("Nome") },
            modifier = Modifier.fillMaxWidth()
        )
        TextField(
            value = habilidadeEspecifica,
            onValueChange = setHabilidadeEspecifica,
            label = { Text("Habilidade Específica") },
            modifier = Modifier.fillMaxWidth().padding(top = 8.dp)
        )
        Button(
            onClick = {
                racaViewModel.salvarRaca(nome, habilidadeEspecifica)
                setNome("")  // Limpa o campo 'Nome'
                setHabilidadeEspecifica("")  // Limpa o campo 'Habilidade Específica'
            },
            modifier = Modifier.padding(top = 8.dp)
        ) {
            Text("Criar")
        }
    }
    Divider(color = Color(0xFF8A2BE2), thickness = 1.dp) // Linha roxa
}

@Composable
fun ListaRacas(racaViewModel: RacaViewModel) {
    val listaRacas by racaViewModel.listaRacas

    if (listaRacas.isNotEmpty()) {
        LazyColumn(modifier = Modifier.fillMaxSize().padding(top = 16.dp)) {
            items(listaRacas) { raca ->
                Row(modifier = Modifier.fillMaxWidth().padding(8.dp)) {
                    Text(text = "Nome: ${raca.nome}", modifier = Modifier.weight(1f))
                    Text(text = "Habilidade: ${raca.habilidadeEspecifica}")
                }
                Row(modifier = Modifier.fillMaxWidth().padding(8.dp)) {
                    // Botão Excluir
                    Button(
                        onClick = { racaViewModel.excluirRaca(raca) },
                        modifier = Modifier.padding(start = 8.dp)
                    ) {
                        Text("Excluir")
                    }
                    // Botão Editar
                    Button(
                        onClick = { /* Ação para editar */ },
                        modifier = Modifier.padding(start = 8.dp)
                    ) {
                        Text("Editar")
                    }
                }
            }
        }
    } else {
        Text("Nenhuma raça encontrada.", modifier = Modifier.padding(8.dp))
    }
    Divider(color = Color(0xFF8A2BE2), thickness = 1.dp) // Linha roxa
}



@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun BuscaPorHabilidade(
    racaViewModel: RacaViewModel,
    buscaHabilidade: String,
    setBuscaHabilidade: (String) -> Unit
) {
    val listaRacasPorHabilidadeEspecifica by racaViewModel.listaRacasPorHabilidadeEspecifica

    Column(modifier = Modifier.padding(8.dp)) {
        // Campo de texto para buscar habilidade
        TextField(
            value = buscaHabilidade,
            onValueChange = setBuscaHabilidade,
            label = { Text("Habilidade Específica") },
            modifier = Modifier.fillMaxWidth()
        )
        Button(
            onClick = { racaViewModel.buscarPorHabilidadeEspecifica(buscaHabilidade) },
            modifier = Modifier.padding(top = 8.dp)
        ) {
            Text("Buscar")
        }

        // Exibe a lista de raças filtradas por habilidade
        if (listaRacasPorHabilidadeEspecifica.isNotEmpty()) {
            LazyColumn(modifier = Modifier.fillMaxSize().padding(top = 16.dp)) {
                items(listaRacasPorHabilidadeEspecifica) { raca ->
                    Row(modifier = Modifier.fillMaxWidth().padding(8.dp)) {
                        Text(text = "Nome: ${raca.nome}", modifier = Modifier.weight(1f))
                        Text(text = "Habilidade: ${raca.habilidadeEspecifica}")
                    }
                    Row(modifier = Modifier.fillMaxWidth().padding(8.dp)) {
                        // Botão Excluir
                        Button(
                            onClick = { racaViewModel.excluirRaca(raca) },
                            modifier = Modifier.padding(start = 8.dp)
                        ) {
                            Text("Excluir")
                        }
                        // Botão Editar
                        Button(
                            onClick = { /* Ação para editar */ },
                            modifier = Modifier.padding(start = 8.dp)
                        ) {
                            Text("Editar")
                        }
                    }
                }
            }
        } else {
            Text("Nenhuma raça encontrada.", modifier = Modifier.padding(8.dp))
        }
    }
    Divider(color = Color(0xFF8A2BE2), thickness = 1.dp) // Linha roxa
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun BuscaPorNome(
    racaViewModel: RacaViewModel,
    buscaNome: String,
    setBuscaNome: (String) -> Unit
) {
    val listaRacasPorNome by racaViewModel.listaRacasPorNome

    Column(modifier = Modifier.padding(8.dp)) {
        // Campo de texto para buscar nome
        TextField(
            value = buscaNome,
            onValueChange = setBuscaNome,
            label = { Text("Nome") },
            modifier = Modifier.fillMaxWidth()
        )
        Button(
            onClick = { racaViewModel.buscarPorNome(buscaNome) },
            modifier = Modifier.padding(top = 8.dp)
        ) {
            Text("Buscar")
        }

        // Exibe a lista de raças filtradas por nome
        if (listaRacasPorNome.isNotEmpty()) {
            LazyColumn(modifier = Modifier.fillMaxSize().padding(top = 16.dp)) {
                items(listaRacasPorNome) { raca ->
                    Row(modifier = Modifier.fillMaxWidth().padding(8.dp)) {
                        Text(text = "Nome: ${raca.nome}", modifier = Modifier.weight(1f))
                        Text(text = "Habilidade: ${raca.habilidadeEspecifica}")
                    }
                    Row(modifier = Modifier.fillMaxWidth().padding(8.dp)) {
                        // Botão Excluir
                        Button(
                            onClick = { racaViewModel.excluirRaca(raca) },
                            modifier = Modifier.padding(start = 8.dp)
                        ) {
                            Text("Excluir")
                        }
                        // Botão Editar
                        Button(
                            onClick = { /* Ação para editar */ },
                            modifier = Modifier.padding(start = 8.dp)
                        ) {
                            Text("Editar")
                        }
                    }
                }
            }
        } else {
            Text("Nenhuma raça encontrada.", modifier = Modifier.padding(8.dp))
        }
    }
    Divider(color = Color(0xFF8A2BE2), thickness = 1.dp) // Linha roxa
}